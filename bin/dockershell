#! /usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'yaml'
require 'logger'

require 'facter'

require 'dockershell'

if Gem.win_platform?
  require 'fileutils'
  FileUtils.mkdir_p 'C:\ProgramData\dockershell'
  config  = 'C:\ProgramData\dockershell\config.yaml'
  logfile = 'C:\ProgramData\dockershell\dockershell.log'
else
  config  = '/etc/dockershell/config.yaml'
  logfile = '/var/log/dockershell'
end

options = {
  :loglevel => 'info',
  :logfile  => logfile,
  :domain   => Facter.value(:domain),
  :docker   => {
    :group  => 'docker',
    :ipaddr => Facter.value(:ipaddress_docker0),  # TODO: hmm. This doesn't seem to appear in Windows Docker
  },
  :profile  => {
    :image  => 'agent',
  }
}
options.merge!(YAML.load_file(config)) if File.file? config
options[:logger] = Logger.new(options[:logfile])
options[:logger].level = Logger::const_get(options[:loglevel].upcase)
if options.include? :profiles and options[:profiles].include? :default
	options[:profile] = options[:profiles][:default]
end

optparse = OptionParser.new { |opts|
    opts.banner = "Usage : dockershell [-p <profile>] [-n <name>] [-d]
         -- Starts a shell by running a Docker container.

"

    opts.on("-d", "--debug", "Display or log debugging messages") do
        options[:logger].level = Logger::DEBUG
    end

    opts.on("-n NAME", "--name NAME", "Provide a name for your container.") do |arg|
        options[:name] = arg
    end

    opts.on("-k NAME", "--kill NAME", "Kill and remove a running container.") do |arg|
        Dockershell.new(options).kill arg
        exit 0
    end

    opts.on("-p PROFILE", "--profile PROFILE", "Which profile to start. Defaults to 'default'.") do |arg|
        next unless options.include? :profiles
        next unless options[:profiles].include? arg.to_sym
        options[:profile] = options[:profiles][arg.to_sym]
    end

    opts.on("-o OPTION", "--option OPTION", "Pass a custom option for prerun/setup/postrun tasks.") do |arg|
        options[:option] = arg
    end

    opts.separator('')

    opts.on("-h", "--help", "Displays this help") do
        puts
        puts opts
        puts
        exit
    end
}
optparse.parse!
options.delete :profiles

Dockershell.new(options).run!
